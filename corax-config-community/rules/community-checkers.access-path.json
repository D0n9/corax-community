[
  {"kind":"hostname-verification","signature":"javax.net.ssl.HttpsURLConnection: * setDefaultHostnameVerifier(**)","subtypes":true,"arg":"Argument[0]","provenance":"manual","ext":""},
  {"kind":"hostname-verification","signature":"javax.net.ssl.HttpsURLConnection: * setHostnameVerifier(**)","subtypes":true,"arg":"Argument[0]","provenance":"manual","ext":""},

  {"kind":"weak-ssl:default-http-client","signature":"<org.apache.http.impl.client.DefaultHttpClient: void <init>()>","subtypes":true,"provenance":"manual","ext":""},
  {"kind":"weak-ssl:algorithm","signature":"javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String protocol,**)","subtypes":true,"arg":"Argument[0]","provenance":"manual","ext":""},
  {"kind":"weak-ssl:algorithm","signature":"javax.net.ssl.SSLParameters: void <init>(java.lang.String[],**)","subtypes":true,"arg":"Argument[1].Element","provenance":"manual","ext":""},
  {"kind":"weak-ssl:algorithm","signature":"javax.net.ssl.SSLParameters: void setProtocols(java.lang.String[])","subtypes":true,"arg":"Argument[0].Element","provenance":"manual","ext":""},
  {"kind":"weak-ssl:algorithm","signature":"javax.net.ssl.SSLSocket: void setEnabledProtocols(java.lang.String[] protocols)","subtypes":true,"arg":"Argument[0].Element","provenance":"manual","ext":""},
  {"kind":"weak-ssl:algorithm","signature":"javax.net.ssl.SSLServerSocket: void setEnabledProtocols(java.lang.String[] protocols)","subtypes":true,"arg":"Argument[0].Element","provenance":"manual","ext":""},
  {"kind":"weak-ssl:algorithm","signature":"javax.net.ssl.SSLEngine: void setEnabledProtocols(java.lang.String[] protocols)","subtypes":true,"arg":"Argument[0].Element","provenance":"manual","ext":""},

  {"kind":"hardcode:credential:username","signature":"com.sun.istack.internal.tools.DefaultAuthenticator$AuthInfo: * AuthInfo(URL,String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"com.sun.jndi.ldap.DigestClientId: * <init>(int,String,int,String,Control[],OutputStream,String,String,Object,Hashtable,?>)","subtypes":true,"arg":"Argument[7]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"com.sun.security.sasl.digest.DigestMD5Server: * generateResponseAuth(String,char[],byte[],int,byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"com.sun.tools.internal.ws.wscompile.AuthInfo: * <init>(URL,String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"java.net.PasswordAuthentication: * <init>(String,char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"java.sql.DriverManager: * getConnection(String,String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"javax.print.attribute.standard.JobOriginatingUserName: * <init>(String,Locale)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"javax.print.attribute.standard.RequestingUserName: * <init>(String,Locale)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"javax.sql.ConnectionPoolDataSource: * getPooledConnection(String,String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"javax.sql.DataSource: * getConnection(String,String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"javax.sql.XADataSource: * getXAConnection(String,String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.jvmstat.perfdata.monitor.protocol.local.LocalVmManager: * <init>(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"com.sun.jndi.ldap.LdapClient: * getInstance(boolean,String,int,String,int,int,OutputStream,int,String,Control[],String,String,Object,Hashtable,?>)","subtypes":true,"arg":"Argument[11]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.jvmstat.perfdata.monitor.protocol.local.PerfDataFile: * getFile(String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.jvmstat.perfdata.monitor.protocol.local.PerfDataFile: * getTempDirectory(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.jvmstat.perfdata.monitor.protocol.rmi.RemoteVmManager: * <init>(RemoteHost,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.misc.Perf: * attach(String,int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.misc.Perf: * attach(String,int,String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.misc.Perf: * attachImpl(String,int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.net.ftp.FtpClient: * login(String,char[],String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.net.ftp.FtpClient: * login(String,char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.net.ftp.FtpDirEntry: * setUser(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.net.ftp.impl.FtpClient: * login(String,char[],String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"com.sun.jndi.ldap.LdapPoolManager: * getLdapClient(String,int,String,int,int,OutputStream,int,String,Control[],String,String,Object,Hashtable,?>)","subtypes":true,"arg":"Argument[10]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.net.ftp.impl.FtpClient: * tryLogin(String,char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.net.ftp.impl.FtpClient: * login(String,char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.net.www.protocol.http.DigestAuthentication: * computeDigest(boolean,String,char[],String,String,String,String,String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.security.acl.PrincipalImpl: * <init>(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.tools.jconsole.ConnectDialog: * setConnectionParameters(String,String,int,String,String,String)","subtypes":true,"arg":"Argument[3]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.tools.jconsole.JConsole: * failed(Exception,String,String,String)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.tools.jconsole.JConsole: * addHost(String,int,String,String,boolean)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.tools.jconsole.JConsole: * addUrl(String,String,String,boolean)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.tools.jconsole.JConsole: * addHost(String,int,String,String)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.tools.jconsole.JConsole: * showConnectDialog(String,String,int,String,String,String)","subtypes":true,"arg":"Argument[3]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"com.sun.jndi.ldap.SimpleClientId: * <init>(int,String,int,String,Control[],OutputStream,String,String,Object)","subtypes":true,"arg":"Argument[7]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.tools.jconsole.ProxyClient: * <init>(String,String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.tools.jconsole.ProxyClient: * <init>(String,int,String,String)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.tools.jconsole.ProxyClient: * setParameters(JMXServiceURL,String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.tools.jconsole.ProxyClient: * getCacheKey(String,String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.tools.jconsole.ProxyClient: * getCacheKey(String,int,String,String)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.tools.jconsole.ProxyClient: * getProxyClient(String,String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.tools.jconsole.ProxyClient: * getConnectionName(String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.tools.jconsole.ProxyClient: * getProxyClient(String,int,String,String)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"sun.tools.jconsole.ProxyClient: * getConnectionName(String,int,String)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"com.sun.net.httpserver.BasicAuthenticator: * checkCredentials(String,String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"com.sun.net.httpserver.HttpPrincipal: * <init>(String,String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"com.sun.rowset.JdbcRowSetImpl: * <init>(String,String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"com.sun.security.ntlm.Client: * <init>(String,String,String,String,char[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:username","signature":"com.sun.security.ntlm.Server: * getPassword(String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.crypto.provider.JceKeyStore: * engineLoad(InputStream,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.crypto.provider.JceKeyStore: * engineGetKey(String,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.net.ssl.KeyManagerFactory: * init(KeyStore,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.tools.jconsole.JConsole: * addUrl(String,String,String,boolean)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.tools.jconsole.JConsole: * addHost(String,int,String,String,boolean)","subtypes":true,"arg":"Argument[3]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.tools.jconsole.JConsole: * showConnectDialog(String,String,int,String,String,String)","subtypes":true,"arg":"Argument[4]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.tools.jconsole.JConsole: * failed(Exception,String,String,String)","subtypes":true,"arg":"Argument[3]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.tools.jconsole.ProxyClient: * getCacheKey(String,String,String)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.tools.jconsole.ProxyClient: * setParameters(JMXServiceURL,String,String)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.tools.jconsole.ProxyClient: * <init>(String,String,String)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.tools.jconsole.ProxyClient: * <init>(String,int,String,String)","subtypes":true,"arg":"Argument[3]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.tools.jconsole.ProxyClient: * getProxyClient(String,int,String,String)","subtypes":true,"arg":"Argument[3]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.tools.jconsole.ProxyClient: * getProxyClient(String,String,String)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.net.ssl.KeyManagerFactorySpi: * engineInit(KeyStore,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.tools.jconsole.ProxyClient: * getCacheKey(String,int,String,String)","subtypes":true,"arg":"Argument[3]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.net.ssl.KeyManagerFactorySpiWrapper: * engineInit(KeyStore,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.org.apache.xml.internal.security.keys.keyresolver.implementations.PrivateKeyResolver: * <init>(KeyStore,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.org.apache.xml.internal.security.keys.keyresolver.implementations.SecretKeyResolver: * <init>(KeyStore,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.rowset.JdbcRowSetImpl: * <init>(String,String,String)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.rowset.JdbcRowSetImpl: * setPassword(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.security.auth.module.JndiLoginModule: * verifyPassword(String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.security.auth.module.JndiLoginModule: * verifyPassword(String,String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.security.ntlm.Client: * <init>(String,String,String,String,char[])","subtypes":true,"arg":"Argument[4]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.crypto.provider.JceKeyStore: * engineSetKeyEntry(String,Key,char[],Certificate[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.security.ntlm.NTLM: * getP2(char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.security.ntlm.NTLM: * getP1(char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.security.sasl.digest.DigestMD5Base: * generateResponseValue(String,String,String,String,String,char[],byte[],byte[],int,byte[])","subtypes":true,"arg":"Argument[5]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.security.sasl.digest.DigestMD5Server: * generateResponseAuth(String,char[],byte[],int,byte[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.tools.internal.ws.wscompile.AuthInfo: * <init>(URL,String,String)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"java.net.PasswordAuthentication: * <init>(String,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"java.security.KeyStore: * setKeyEntry(String,Key,char[],Certificate[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"java.security.KeyStore: * store(OutputStream,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"java.security.KeyStore: * getKey(String,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"java.security.KeyStore: * load(InputStream,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.crypto.provider.JceKeyStore: * engineStore(OutputStream,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"java.security.KeyStore$PasswordProtection: * PasswordProtection(char[],String,AlgorithmParameterSpec)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"java.security.KeyStore$PasswordProtection: * PasswordProtection(char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"java.security.KeyStoreSpi: * engineStore(OutputStream,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"java.security.KeyStoreSpi: * engineLoad(InputStream,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"java.security.KeyStoreSpi: * engineSetKeyEntry(String,Key,char[],Certificate[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"java.security.KeyStoreSpi: * engineGetKey(String,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"java.sql.DriverManager: * getConnection(String,String,String)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"javax.crypto.spec.PBEKeySpec: * <init>(char[],byte[],int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"javax.crypto.spec.PBEKeySpec: * <init>(char[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"javax.crypto.spec.PBEKeySpec: * <init>(char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.crypto.provider.JceKeyStore: * getPreKeyedHash(char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"javax.net.ssl.KeyManagerFactory: * init(KeyStore,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"javax.net.ssl.KeyManagerFactorySpi: * engineInit(KeyStore,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"javax.security.auth.callback.PasswordCallback: * setPassword(char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"javax.security.auth.kerberos.KerberosKey: * <init>(KerberosPrincipal,char[],String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"javax.security.auth.kerberos.KeyImpl: * <init>(KerberosPrincipal,char[],String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"javax.sql.ConnectionPoolDataSource: * getPooledConnection(String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"javax.sql.DataSource: * getConnection(String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"javax.sql.RowSet: * setPassword(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"javax.sql.XADataSource: * getXAConnection(String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.net.ftp.FtpClient: * login(String,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.crypto.provider.KeyProtector: * <init>(char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.net.ftp.FtpClient: * login(String,char[],String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.net.ftp.impl.FtpClient: * login(String,char[],String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.net.ftp.impl.FtpClient: * login(String,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.net.ftp.impl.FtpClient: * tryLogin(String,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.net.www.protocol.http.DigestAuthentication: * encode(String,char[],MessageDigest)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.net.www.protocol.http.DigestAuthentication: * computeDigest(boolean,String,char[],String,String,String,String,String,String)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.krb5.EncryptionKey: * acquireSecretKey(char[],String,int,byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.krb5.EncryptionKey: * stringToKey(char[],String,byte[],int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.krb5.EncryptionKey: * <init>(char[],String,String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.krb5.EncryptionKey: * acquireSecretKeys(char[],String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.crypto.provider.PBKDF2KeyImpl: * deriveKey(Mac,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.krb5.EncryptionKey: * acquireSecretKey(PrincipalName,char[],int,SaltAndParams)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.krb5.KrbAsRep: * decryptUsingPassword(char[],KrbAsReq,PrincipalName)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.krb5.internal.crypto.Aes128: * stringToKey(char[],String,byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.krb5.internal.crypto.Aes256: * stringToKey(char[],String,byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.krb5.internal.crypto.ArcFourHmac: * stringToKey(char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.krb5.internal.crypto.Des: * char_to_key(char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.krb5.internal.crypto.Des: * string_to_key_bytes(char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.krb5.internal.crypto.dk.AesDkCrypto: * stringToKey(char[],String,byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.krb5.internal.crypto.dk.ArcFourCrypto: * stringToKey(char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.pkcs11.P11KeyStore: * engineLoad(InputStream,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.crypto.provider.PBKDF2KeyImpl: * getPasswordBytes(char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.pkcs11.P11KeyStore: * engineGetKey(String,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.pkcs11.P11KeyStore: * engineStore(OutputStream,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.pkcs11.P11KeyStore: * engineSetKeyEntry(String,Key,char[],Certificate[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.pkcs11.P11KeyStore$PasswordCallbackHandler: * PasswordCallbackHandler(char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.pkcs11.Secmod$KeyStoreLoadParameter: * KeyStoreLoadParameter(TrustType,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.pkcs12.PKCS12KeyStore: * engineGetKey(String,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.pkcs12.PKCS12KeyStore: * calculateMac(char[],byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.pkcs12.PKCS12KeyStore: * encryptContent(byte[],char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.pkcs12.PKCS12KeyStore: * loadSafeContents(DerInputStream,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.pkcs12.PKCS12KeyStore: * engineSetKeyEntry(String,Key,char[],Certificate[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.istack.internal.tools.DefaultAuthenticator$AuthInfo: * AuthInfo(URL,String,String)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.pkcs12.PKCS12KeyStore: * engineStore(OutputStream,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.pkcs12.PKCS12KeyStore: * engineLoad(InputStream,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.pkcs12.PKCS12KeyStore: * getPBEKey(char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.pkcs12.PKCS12KeyStore: * createEncryptedData(char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.provider.DomainKeyStore: * engineGetKey(String,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.provider.DomainKeyStore: * engineSetKeyEntry(String,Key,char[],Certificate[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.provider.DomainKeyStore: * engineStore(OutputStream,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.provider.DomainKeyStore: * engineLoad(InputStream,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.provider.JavaKeyStore: * engineSetKeyEntry(String,Key,char[],Certificate[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.provider.JavaKeyStore: * engineLoad(InputStream,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"com.sun.net.httpserver.BasicAuthenticator: * checkCredentials(String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.provider.JavaKeyStore: * getPreKeyedHash(char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.provider.JavaKeyStore: * engineGetKey(String,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.provider.JavaKeyStore: * engineStore(OutputStream,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.provider.KeyProtector: * <init>(char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.ssl.KeyManagerFactoryImpl$SunX509: * engineInit(KeyStore,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.ssl.KeyManagerFactoryImpl$X509: * engineInit(KeyStore,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.ssl.SunX509KeyManagerImpl: * <init>(KeyStore,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.security.tools.keytool.Main: * getNewPasswd(String,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.tools.jconsole.ConnectDialog: * setConnectionParameters(String,String,int,String,String,String)","subtypes":true,"arg":"Argument[4]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:password","signature":"sun.tools.jconsole.JConsole: * addHost(String,int,String,String)","subtypes":true,"arg":"Argument[3]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.AESCipher: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.AESCrypt: * init(boolean,String,byte[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.CipherWithWrappingSpi: * constructPublicKey(byte[],String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Aes256CtsHmacSha1EType: * encrypt(byte[],byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Aes256CtsHmacSha1EType: * decrypt(byte[],byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Aes256CtsHmacSha1EType: * decrypt(byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Aes256CtsHmacSha1EType: * encrypt(byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.ArcFourHmac: * encryptRaw(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.ArcFourHmac: * decryptRaw(byte[],int,byte[],byte[],int,int,byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.ArcFourHmac: * decrypt(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.ArcFourHmac: * decryptSeq(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.ArcFourHmac: * encrypt(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.ArcFourHmac: * calculateChecksum(byte[],int,byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.CipherWithWrappingSpi: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.ArcFourHmac: * encryptSeq(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.ArcFourHmacEType: * decrypt(byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.ArcFourHmacEType: * encrypt(byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.ArcFourHmacEType: * decrypt(byte[],byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.ArcFourHmacEType: * encrypt(byte[],byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.CksumType: * calculateKeyedChecksum(byte[],int,byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.CksumType: * verifyKeyedChecksum(byte[],int,byte[],byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Crc32CksumType: * verifyKeyedChecksum(byte[],int,byte[],byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Crc32CksumType: * calculateKeyedChecksum(byte[],int,byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Des: * cbc_encrypt(byte[],byte[],byte[],byte[],boolean)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.CipherWithWrappingSpi: * constructSecretKey(byte[],String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Des: * set_parity(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Des: * bad_key(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Des: * des_cksum(byte[],byte[],byte[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Des3: * decryptRaw(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Des3: * encrypt(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Des3: * encryptRaw(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Des3: * decrypt(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Des3: * calculateChecksum(byte[],int,byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Des3CbcHmacSha1KdEType: * encrypt(byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Des3CbcHmacSha1KdEType: * encrypt(byte[],byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.CipherWithWrappingSpi: * constructPrivateKey(byte[],String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Des3CbcHmacSha1KdEType: * decrypt(byte[],byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Des3CbcHmacSha1KdEType: * decrypt(byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.DesCbcCrcEType: * decrypt(byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.DesCbcCrcEType: * encrypt(byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.DesCbcEType: * encrypt(byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.DesCbcEType: * decrypt(byte[],byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.DesCbcEType: * encrypt(byte[],byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.DesCbcEType: * decrypt(byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.DesMacCksumType: * calculateKeyedChecksum(byte[],int,byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.DesMacCksumType: * decryptKeyedChecksum(byte[],byte[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.ConstructKeys: * constructPrivateKey(byte[],String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.DesMacCksumType: * verifyKeyedChecksum(byte[],int,byte[],byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.DesMacKCksumType: * calculateKeyedChecksum(byte[],int,byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.DesMacKCksumType: * verifyKeyedChecksum(byte[],int,byte[],byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.EType: * encrypt(byte[],byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.EType: * decrypt(byte[],byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.EType: * decrypt(byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.EType: * encrypt(byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.HmacMd5ArcFourCksumType: * verifyKeyedChecksum(byte[],int,byte[],byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.HmacMd5ArcFourCksumType: * calculateKeyedChecksum(byte[],int,byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.HmacSha1Aes128CksumType: * verifyKeyedChecksum(byte[],int,byte[],byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.ConstructKeys: * constructSecretKey(byte[],String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.HmacSha1Aes128CksumType: * calculateKeyedChecksum(byte[],int,byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.HmacSha1Aes256CksumType: * verifyKeyedChecksum(byte[],int,byte[],byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.HmacSha1Aes256CksumType: * calculateKeyedChecksum(byte[],int,byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.HmacSha1Des3KdCksumType: * calculateKeyedChecksum(byte[],int,byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.HmacSha1Des3KdCksumType: * verifyKeyedChecksum(byte[],int,byte[],byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.NullEType: * decrypt(byte[],byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.NullEType: * decrypt(byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.NullEType: * encrypt(byte[],byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.NullEType: * encrypt(byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.RsaMd5CksumType: * verifyKeyedChecksum(byte[],int,byte[],byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.ConstructKeys: * constructPublicKey(byte[],String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.RsaMd5CksumType: * calculateKeyedChecksum(byte[],int,byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.RsaMd5DesCksumType: * decryptKeyedChecksum(byte[],byte[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.RsaMd5DesCksumType: * verifyKeyedChecksum(byte[],int,byte[],byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.RsaMd5DesCksumType: * calculateKeyedChecksum(byte[],int,byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.AesDkCrypto: * encryptCTS(byte[],int,byte[],byte[],byte[],int,int,boolean)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.AesDkCrypto: * decrypt(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.AesDkCrypto: * encryptRaw(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.AesDkCrypto: * calculateChecksum(byte[],int,byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.AesDkCrypto: * encrypt(byte[],int,byte[],byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.AesDkCrypto: * getHmac(byte[],byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.CounterMode: * init(boolean,String,byte[],byte[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.AesDkCrypto: * getCipher(byte[],byte[],int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.AesDkCrypto: * decryptRaw(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.AesDkCrypto: * decryptCTS(byte[],int,byte[],byte[],int,int,boolean)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.ArcFourCrypto: * decryptSeq(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.ArcFourCrypto: * decryptRaw(byte[],int,byte[],byte[],int,int,byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.ArcFourCrypto: * decrypt(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.ArcFourCrypto: * encryptRaw(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.ArcFourCrypto: * getCipher(byte[],byte[],int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.ArcFourCrypto: * encryptSeq(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.ArcFourCrypto: * calculateChecksum(byte[],int,byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.DESCipher: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.ArcFourCrypto: * encrypt(byte[],int,byte[],byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.ArcFourCrypto: * getHmac(byte[],byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.Des3DkCrypto: * keyCorrection(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.Des3DkCrypto: * getCipher(byte[],byte[],int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.Des3DkCrypto: * getHmac(byte[],byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.Des3DkCrypto: * setParityBit(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.DkCrypto: * encrypt(byte[],int,byte[],byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.DkCrypto: * decrypt(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.DkCrypto: * encryptRaw(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.DkCrypto: * calculateChecksum(byte[],int,byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.DESCrypt: * expandKey(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.DkCrypto: * decryptRaw(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.DkCrypto: * getHmac(byte[],byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.DkCrypto: * getCipher(byte[],byte[],int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.DkCrypto: * dk(byte[],byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.dk.DkCrypto: * dr(byte[],byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.pkcs.PKCS8Key: * decode(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.pkcs.PKCS8Key: * <init>(AlgorithmId,byte[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.pkcs.PKCS8Key: * buildPKCS8Key(AlgorithmId,byte[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.pkcs.PKCS8Key: * encode(DerOutputStream,AlgorithmId,byte[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.pkcs11.ConstructKeys: * constructPublicKey(byte[],String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.AESWrapCipher: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.DESCrypt: * init(boolean,String,byte[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.pkcs11.ConstructKeys: * constructPrivateKey(byte[],String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.pkcs11.ConstructKeys: * constructSecretKey(byte[],String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.pkcs11.P11Cipher: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.pkcs11.P11KeyStore: * engineSetKeyEntry(String,byte[],Certificate[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.pkcs11.P11RSACipher: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.pkcs11.P11SecretKeyFactory: * fixDESParity(byte[],int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.pkcs12.PKCS12KeyStore: * engineSetKeyEntry(String,byte[],Certificate[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.provider.DomainKeyStore: * engineSetKeyEntry(String,byte[],Certificate[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.provider.JavaKeyStore: * engineSetKeyEntry(String,byte[],Certificate[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.tools.keytool.Main: * recoverKey(String,char[],char[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.DESKey: * <init>(byte[],int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.tools.keytool.Main: * getKeyPasswd(String,String,char[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.x509.X509Key: * decode(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.DESKey: * <init>(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.DESKeyGenerator: * setParityBit(byte[],int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.DESedeCipher: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.DESedeKey: * <init>(byte[],int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.DESedeKey: * <init>(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.DESedeWrapCipher: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.DHPrivateKey: * <init>(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.DHPublicKey: * <init>(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.ARCFOURCipher: * init(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.ElectronicCodeBook: * init(boolean,String,byte[],byte[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.FeedbackCipher: * init(boolean,String,byte[],byte[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.GaloisCounterMode: * init(boolean,String,byte[],byte[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.GaloisCounterMode: * init(boolean,String,byte[],byte[],int)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.JceKeyStore: * engineSetKeyEntry(String,byte[],Certificate[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.KeyProtector: * recover(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.OutputFeedback: * init(boolean,String,byte[],byte[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.PBECipherCore: * unwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.PBES1Core: * unwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.PBES2Core: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.ARCFOURCipher: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.PBEWithMD5AndDESCipher: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.PBEWithMD5AndTripleDESCipher: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.PCBC: * init(boolean,String,byte[],byte[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.PKCS12PBECipherCore: * implUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.PKCS12PBECipherCore$PBEWithSHA1AndDESede: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.PKCS12PBECipherCore$PBEWithSHA1AndRC2_128: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.PKCS12PBECipherCore$PBEWithSHA1AndRC2_40: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.PKCS12PBECipherCore$PBEWithSHA1AndRC4_128: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.PKCS12PBECipherCore$PBEWithSHA1AndRC4_40: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.RC2Cipher: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.BlowfishCipher: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.RC2Crypt: * init(boolean,String,byte[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.RSACipher: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.SymmetricCipher: * init(boolean,String,byte[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.TlsMasterSecretGenerator$TlsMasterSecretKey: * TlsMasterSecretKey(byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"java.security.KeyStore: * setKeyEntry(String,byte[],Certificate[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"java.security.KeyStoreSpi: * engineSetKeyEntry(String,byte[],Certificate[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"java.security.cert.X509CertSelector: * setSubjectPublicKey(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"java.security.spec.EncodedKeySpec: * <init>(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"java.security.spec.PKCS8EncodedKeySpec: * <init>(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"java.security.spec.X509EncodedKeySpec: * <init>(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.BlowfishCrypt: * init(boolean,String,byte[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"javax.crypto.Cipher: * unwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"javax.crypto.CipherSpi: * engineUnwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"javax.crypto.EncryptedPrivateKeyInfo: * checkPKCS8Encoding(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"javax.crypto.spec.DESKeySpec: * isWeak(byte[],int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"javax.crypto.spec.DESKeySpec: * <init>(byte[],int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"javax.crypto.spec.DESKeySpec: * isParityAdjusted(byte[],int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"javax.crypto.spec.DESKeySpec: * <init>(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"javax.crypto.spec.DESedeKeySpec: * isParityAdjusted(byte[],int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"javax.crypto.spec.DESedeKeySpec: * <init>(byte[],int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"javax.crypto.spec.DESedeKeySpec: * <init>(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.CipherBlockChaining: * init(boolean,String,byte[],byte[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"javax.crypto.spec.SecretKeySpec: * <init>(byte[],String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"javax.crypto.spec.SecretKeySpec: * <init>(byte[],int,int,String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"javax.security.auth.kerberos.KerberosKey: * <init>(KerberosPrincipal,byte[],int,int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"javax.security.auth.kerberos.KerberosTicket: * <init>(byte[],KerberosPrincipal,KerberosPrincipal,byte[],int,boolean[],Date,Date,Date,Date,InetAddress[])","subtypes":true,"arg":"Argument[3]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"javax.security.auth.kerberos.KerberosTicket: * init(byte[],KerberosPrincipal,KerberosPrincipal,byte[],int,boolean[],Date,Date,Date,Date,InetAddress[])","subtypes":true,"arg":"Argument[3]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"javax.security.auth.kerberos.KeyImpl: * <init>(byte[],int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.jgss.krb5.CipherHelper: * getInitializedDes(boolean,byte[],byte[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.jgss.krb5.CipherHelper: * getDesCbcChecksum(byte[],byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.jgss.krb5.CipherHelper: * getDesEncryptionKey(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.jgss.krb5.CipherHelper: * desCbcDecrypt(WrapToken,byte[],byte[],int,int,byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.CipherCore: * unwrap(byte[],String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.jgss.krb5.CipherHelper: * desCbcDecrypt(WrapToken,byte[],InputStream,int,byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.jgss.krb5.Krb5InitCredential: * <init>(Krb5NameElement,byte[],KerberosPrincipal,KerberosPrincipal,byte[],int,boolean[],Date,Date,Date,Date,InetAddress[])","subtypes":true,"arg":"Argument[4]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.jgss.krb5.Krb5InitCredential: * <init>(Krb5NameElement,Credentials,byte[],KerberosPrincipal,KerberosPrincipal,byte[],int,boolean[],Date,Date,Date,Date,InetAddress[])","subtypes":true,"arg":"Argument[5]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.Credentials: * <init>(byte[],String,String,byte[],int,boolean[],Date,Date,Date,Date,InetAddress[])","subtypes":true,"arg":"Argument[3]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.EncryptionKey: * <init>(int,byte[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.EncryptionKey: * <init>(byte[],int,Integer)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Aes128: * decryptRaw(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Aes128: * calculateChecksum(byte[],int,byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Aes128: * decrypt(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Aes128: * encryptRaw(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"com.sun.crypto.provider.CipherFeedback: * init(boolean,String,byte[],byte[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Aes128: * encrypt(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Aes128CtsHmacSha1EType: * encrypt(byte[],byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Aes128CtsHmacSha1EType: * decrypt(byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Aes128CtsHmacSha1EType: * encrypt(byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Aes128CtsHmacSha1EType: * decrypt(byte[],byte[],byte[],int)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Aes256: * encrypt(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Aes256: * decryptRaw(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Aes256: * calculateChecksum(byte[],int,byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Aes256: * encryptRaw(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"sun.security.krb5.internal.crypto.Aes256: * decrypt(byte[],int,byte[],byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"<java.security.spec.DSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>","subtypes":true,"arg":"Argument[3,2,1,0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"<java.security.spec.DSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>","subtypes":true,"arg":"Argument[3,2,1,0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"<javax.crypto.spec.DHPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>","subtypes":true,"arg":"Argument[2,1,0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"<javax.crypto.spec.DHPublicKeySpec: void <init> (java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>","subtypes":true,"arg":"Argument[2,1,0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"<java.security.spec.ECPrivateKeySpec: void <init>(java.math.BigInteger,java.security.spec.ECParameterSpec)>","subtypes":true,"arg":"Argument[1,0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"<java.security.spec.RSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>","subtypes":true,"arg":"Argument[1,0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.security.spec.RSAOtherPrimeInfo[])>","subtypes":true,"arg":"Argument[7,6,5,4,3,2,1,0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"<java.security.spec.RSAPrivateCrtKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>","subtypes":true,"arg":"Argument[7,6,5,4,3,2,1,0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>","subtypes":true,"arg":"Argument[1,0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"<sun.security.provider.DSAPublicKeyImpl: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>","subtypes":true,"arg":"Argument[3,2,1,0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"<sun.security.provider.DSAPublicKeyImpl: void <init>(byte[])>","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"<java.security.KeyRep: void <init>(java.security.KeyRep$Type,java.lang.String,java.lang.String,byte[])>","subtypes":true,"arg":"Argument[3]","provenance":"false","ext":""},
  {"kind":"hardcode:crypto-key","signature":"io.jsonwebtoken.JwtParser: * setSigningKey(String base64EncodedKeyBytes)","subtypes":true,"arg":"Argument[0]","provenance":"manual","ext":""},
  {"kind":"hardcode:crypto-key","signature":"io.jsonwebtoken.JwtParser: * setSigningKey(byte[] key)","subtypes":true,"arg":"Argument[0].Element","provenance":"manual","ext":""},
  {"kind":"hardcode:crypto-key","signature":"io.jsonwebtoken.JwtParserBuilder: * setSigningKey(String base64EncodedKeyBytes)","subtypes":true,"arg":"Argument[0]","provenance":"manual","ext":""},
  {"kind":"hardcode:crypto-key","signature":"io.jsonwebtoken.JwtParserBuilder: * setSigningKey(byte[] key)","subtypes":true,"arg":"Argument[0].Element","provenance":"manual","ext":""},
  {"kind":"hardcode:crypto-key","signature":"io.jsonwebtoken.impl.DefaultJwtParser: * setSigningKey(String base64EncodedKeyBytes)","subtypes":true,"arg":"Argument[0]","provenance":"manual","ext":""},
  {"kind":"hardcode:crypto-key","signature":"io.jsonwebtoken.impl.DefaultJwtParser: * setSigningKey(byte[] key)","subtypes":true,"arg":"Argument[0].Element","provenance":"manual","ext":""},
  {"kind":"hardcode:crypto-key","signature":"io.jsonwebtoken.impl.DefaultJwtParserBuilder: * setSigningKey(String base64EncodedKeyBytes)","subtypes":true,"arg":"Argument[0]","provenance":"manual","ext":""},
  {"kind":"hardcode:crypto-key","signature":"io.jsonwebtoken.impl.DefaultJwtParserBuilder: * setSigningKey(byte[] key)","subtypes":true,"arg":"Argument[0].Element","provenance":"manual","ext":""},
  {"kind":"hardcode:credential:other","signature":"javax.crypto.spec.IvParameterSpec: * <init>(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"javax.crypto.spec.IvParameterSpec: * <init>(byte[],int,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"org.springframework.security.core.userdetails.User: * <init>(String,String,boolean,boolean,boolean,boolean,Collection)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"org.springframework.security.core.userdetails.User: * <init>(String,String,boolean,boolean,boolean,boolean,Collection)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.amazonaws.auth.BasicAWSCredentials: * <init>(String,String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.amazonaws.auth.BasicAWSCredentials: * <init>(String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.azure.identity.UsernamePasswordCredentialBuilder: * username(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.azure.identity.UsernamePasswordCredentialBuilder: * password(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.azure.identity.ClientSecretCredentialBuilder: * clientSecret(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"org.apache.shiro.mgt.AbstractRememberMeManager: * setCipherKey(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"org.apache.shiro.web.mgt.CookieRememberMeManager: * setCipherKey(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"org.apache.shiro.web.mgt.CookieRememberMeManager: * setEncryptionCipherKey(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"org.apache.shiro.web.mgt.CookieRememberMeManager: * setDecryptionCipherKey(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.jcraft.jsch.JSch: * getSession(String,String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.jcraft.jsch.JSch: * getSession(String,String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"ch.ethz.ssh2.Connection: * authenticateWithPassword(String,String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"org.apache.sshd.client.SshClient: * connect(String,String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"org.apache.sshd.client.SshClient: * connect(String,String,int,AttributeRepository)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"org.apache.sshd.client.SshClient: * connect(String,SocketAddress)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"org.apache.sshd.client.SshClient: * connect(String,SocketAddress,AttributeRepository)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"org.apache.sshd.client.session.ClientSessionCreator: * connect(String,String,int)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"org.apache.sshd.client.session.ClientSessionCreator: * connect(String,SocketAddress)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"net.schmizz.sshj.SSHClient: * authPassword(String,char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"net.schmizz.sshj.SSHClient: * authPassword(String,String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.sshtools.j2ssh.authentication.SshAuthenticationClient: * setUsername(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.sshtools.j2ssh.authentication.PasswordAuthenticationClient: * setUsername(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.trilead.ssh2.Connection: * authenticateWithPassword(String,String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.trilead.ssh2.Connection: * authenticateWithDSA(String,String,String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.trilead.ssh2.Connection: * authenticateWithNone(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.trilead.ssh2.Connection: * getRemainingAuthMethods(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.trilead.ssh2.Connection: * isAuthMethodAvailable(String,String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.trilead.ssh2.Connection: * authenticateWithPublicKey(String,char[],String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.trilead.ssh2.Connection: * authenticateWithPublicKey(String,File,String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.jcraft.jsch.Session: * setPassword(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.jcraft.jsch.Session: * setPassword(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"ch.ethz.ssh2.Connection: * authenticateWithPassword(String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"org.apache.sshd.client.session.AbstractClientSession: * addPasswordIdentity(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"net.schmizz.sshj.SSHClient: * authPassword(String,char[])","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"net.schmizz.sshj.SSHClient: * authPassword(String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.sshtools.j2ssh.authentication.PasswordAuthenticationClient: * setPassword(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.trilead.ssh2.Connection: * authenticateWithPassword(String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.trilead.ssh2.Connection: * authenticateWithDSA(String,String,String)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.trilead.ssh2.Connection: * authenticateWithPublicKey(String,char[],String)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.trilead.ssh2.Connection: * authenticateWithPublicKey(String,File,String)","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.trilead.ssh2.Connection: * authenticateWithDSA(String,String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.trilead.ssh2.Connection: * authenticateWithPublicKey(String,char[],String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"org.apache.commons.net.ftp.FTPClient: * login(String,String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"org.apache.commons.net.ftp.FTPClient: * login(String,String,String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"org.apache.commons.net.ftp.FTPClient: * login(String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"org.apache.commons.net.ftp.FTPClient: * login(String,String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.mongodb.MongoCredential: * createCredential(String,String,char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.mongodb.MongoCredential: * createMongoCRCredential(String,String,char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.mongodb.MongoCredential: * createPlainCredential(String,String,char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.mongodb.MongoCredential: * createScramSha1Credential(String,String,char[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.mongodb.MongoCredential: * createGSSAPICredential(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.mongodb.MongoCredential: * createMongoX509Credential(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.mongodb.MongoCredential: * createCredential(String,String,char[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.mongodb.MongoCredential: * createMongoCRCredential(String,String,char[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.mongodb.MongoCredential: * createPlainCredential(String,String,char[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.mongodb.MongoCredential: * createScramSha1Credential(String,String,char[])","subtypes":true,"arg":"Argument[2]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.microsoft.sqlserver.jdbc.SQLServerDataSource: * setUser(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.microsoft.sqlserver.jdbc.SQLServerDataSource: * setPassword(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.microsoft.sqlserver.jdbc.SQLServerDataSource: * getConnection(String,String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.microsoft.sqlserver.jdbc.SQLServerDataSource: * getConnection(String,String)","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.auth0.jwt.algorithms.Algorithm: * HMAC256(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.auth0.jwt.algorithms.Algorithm: * HMAC256(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.auth0.jwt.algorithms.Algorithm: * HMAC384(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.auth0.jwt.algorithms.Algorithm: * HMAC384(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.auth0.jwt.algorithms.Algorithm: * HMAC512(String)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"com.auth0.jwt.algorithms.Algorithm: * HMAC512(byte[])","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"<io.vertx.ext.auth.oauth2.OAuth2Options: io.vertx.ext.auth.oauth2.OAuth2Options setClientSecret(java.lang.String)>","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"<io.vertx.ext.web.handler.CSRFHandler: io.vertx.ext.web.handler.CSRFHandler create(io.vertx.core.Vertx,java.lang.String)>","subtypes":true,"arg":"Argument[1]","provenance":"false","ext":""},
  {"kind":"hardcode:credential:other","signature":"<org.springframework.security.oauth2.config.annotation.builders.ClientDetailsServiceBuilder$ClientBuilder: org.springframework.security.oauth2.config.annotation.builders.ClientDetailsServiceBuilder$ClientBuilder secret(java.lang.String)>","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},


  {"kind":"cipher:transformation","signature":"javax.crypto.Cipher: javax.crypto.Cipher getInstance(String,**)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""},
  {"kind":"cipher:transformation","signature":"javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(String,**)","subtypes":true,"arg":"Argument[0]","provenance":"false","ext":""}
]