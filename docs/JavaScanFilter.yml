# https://regex101.com/
# 作为java分析的主要目标是 application classes，如果过程间分析流向了 library classes 那么 library classes 才会被分析，也就是说被 exclude 的类仍然被加载且"可能"被分析到
# 判断逻辑：在 exclude中 "且" 不在 include 中的类被标记为 library classes, 文件匹配逻辑亦是如此
# Only application classes are considered as analysis targets by the analyzer. If the analysis flow between processes reaches library classes, library classes are analyzed. This means that classes that are excluded may still be loaded and may be analyzed if they are reached during the analysis flow.
# The determination logic is as follows: classes that are included in the exclude list and not included in the include list are marked as library classes.

## add option: --output ${output} before corax option --extra-engine-args
## add option: --project-scan-config JavaScanFilter.yml after --extra-engine-args
## The skip information will be found in : ${output}/analyzeSkip/classSkipList.txt ${output}/analyzeSkip/sourceFileSkipList.txt at the end


analyze-filter:
  class:
    exclude:
      - \.R\$\w+$
      - org\.owasp\.benchmark\..+$
    include:
      - owasp\.benchmark\.testcode\..+$
  file:
    # 分析器会对所有的路径 normalize 处理并且将 "\" 替换为 "/" , 然后再应用下面的正则进行匹配
    # All paths that are going to be regular expressions are normalized and the path separator is replaced with "/".
    # eg: "C:\\Users\\default\Desktop\\Hello.java" => C:/Users/default/Desktop/Hello.java
    
    exclude:
      # dirs
      - /out/
      - /tmp/
      - /temp/
      - /log/
      - /logs/
      - /build/
      - /target/
      - /\.git/
      - /\.idea/
      - /\.gradle/
      - /\.mvn
      - /\.run/
      # files
      - /\.R\.java$
    include: