
# Configuration for scanning-related settings of the analyzed project

# Usage
#   Add argument: --output ${output} before corax analysis parameter --extra-args
#   Append argument: --project-config project-scan-config.yml at the end of the command
#   This configuration includes extensive explanations; to skip, proceed to line 100 for direct configuration
#
# Effect of Configuration
#   The practical outcome of filtering on scanned content can be viewed after analysis by opening ${output}/scan-classifier-info.json, which reveals class categorization and which source code was included or excluded from analysis
#   The ScanAction types in this file include:
#     Process: To be scanned
#     Skip: Not actively scanned
#     Keep: Maintain original state
#
# Additional Information
#   Visit https://regex101.com to test regular expressions, selecting FLAVOR as Java
#   Note that "\." matches ".", while a single "." matches any character (excluding line terminators)


# Analysis targets are categorized into classes (commonly found in folders/jars/wars/apks/dex/zips, etc.) and ordinary files (any non-class files such as source code, XML, txt, properties, etc.)
process-regex: # Filter configuration for analysis targets
  # Configurable fields include: (multiple fields, if present, are logically ANDed)
  #   class:           # For class classification only,‰∏çÂΩ±ÂìçÊ∫êÁ†ÅÊñá‰ª∂ processing
  #   classpath:       # For configuring class loading filters, classes within excluded classpaths won't be loaded by the analyzer, hence won't be analyzed
  #   file:            # Solely for including or excluding various resource files from scanning, such as source code and resources, without affecting classes

  # Matching mechanism: Later rules have higher priority; e.g., with these ordered rules, */src/Abc.java will be excluded from analysis, while */src/Efg.java will be analyzed.
  #   - op: Add
  #     path: /src/Abc.java  # All files with '/src/Abc.java' in their path
  #   - op: Sub
  #     path: /src/          # All files containing '/src/' in their path
  #   - op: Add
  #     path: /src/Efg.java  # All files with '/src/Efg.java' in their path


  class: # For class classification only,‰∏çÂΩ±ÂìçÊ∫êÁ†ÅÊñá‰ª∂ processing

    # Background Knowledge:
    #   All runtime classes are divided into three categories: application class (primary focus of scanning), library class (third-party dependencies for enhancing analysis precision), and phantom class (class not found, potentially due to incomplete compilation, missing libraries, incorrect parameters, unsupported binary formats, etc.)
    #  +----------------+-------------------------------------------------+------------------------------------------------------------------------+------------------------------------------------------+
    #  | Class Category |             Origin                              |                      Explanation                                       |                     Notes                            |
    #  +================+=================================================+========================================================================+======================================================+
    #  |                | Classes specified via --process                 | Classes that the analyzer focuses on,                                  | Improper parameter or filter configurations can lead |
    #  | Application    +-------------------------------------------------+ Primary classes users intend to scan directly                          | to excessive inclusion of library code,              |
    #  |                | Classes existing in source per --auto-app-class |                                                                        | causing high memory and performance consumption      |
    #  |                |                                                 | and inefficient scanning of code of interest                           | on machines                                          |
    #  +----------------+-------------------------------------------------+------------------------------------------------------------------------+------------------------------------------------------+
    #  |                | Classes listed in --class-path                  | Typically third-party libraries that the project depends on            | Misconfigurations can inadvertently classify         |
    #  | Library        +-------------------------------------------------+ Only these classes are analyzed when referenced by Application classes | user-focused classes as Library classes,             |
    #  |                | Classes absent in source per --auto-app-class   | Enhances analysis precision                                            | potentially resulting in missed scans                |
    #  +----------------+-------------------------------------------------+------------------------------------------------------------------------+------------------------------------------------------+
    #  | Phantom        | Classes not located                             | Potentially due to incomplete project compilation,                     | Aim to minimize the number of Phantom classes        |
    #  |                | Classes referenced but not found                | Incomplete third-party libraries, incorrect parameters,                |                                                      |
    #  |                | Binary format unsupported, etc.                 |                                                                        |                                                      |
    #  +----------------+-------------------------------------------------+------------------------------------------------------------------------+------------------------------------------------------+

    # After preprocessing based on parameters like --process, --auto-app-class, etc., and considering this configuration if --project-config is set with project-scan-config.yml, classifications might be adjusted.
    #  +--------------+--------------+---------------+
    #  | Pre-Match State | Match Outcome | Post-Match State |
    #  +=============+==============+===============+
    #  |             |      Add     |  Application  |
    #  +-------------+--------------+---------------+
    #  | Application |      Sub     |   *Library*   |  üü°Avoid demoting classes intended for analysis; careful consideration is needed when subtracting project's own classes.
    #  +-------------+--------------+---------------+
    #  |             |    No Match  |  Application  |
    #  +-------------+--------------+---------------+
    #  |             |      Add     | *Application* |  üü°Prevent unnecessary classes (like third-party library classes) from being added, as it leads to excessive analysis scope and resource consumption.
    #  +-------------+--------------+---------------+
    #  |   Library   |      Sub     |    Library    |
    #  +-------------+--------------+---------------+
    #  |             |    No Match  |    Library    |
    #  +-------------+--------------+---------------+
    #  |             |      Add     |    Phantom    |
    #  +-------------+--------------+---------------+
    #  |   Phantom   |      Sub     |    Phantom    |
    #  +-------------+--------------+---------------+
    #  |             |    No Match  |    Phantom    |
    #  +-------------+--------------+---------------+

    # Configurable fields include: (for a rule with multiple fields, logical AND is applied)
    #   - op: Add                    # Add for inclusion, Sub for exclusion
    #     class:name: %regex%        # Matches the class name, e.g., com.example.Main
    #                                # Note: Backslashes or forward slashes are not allowed for class name matching
    #     class:src: %regex%         # Since one source can correspond to multiple classes, use source path regex to match classes without affecting the source itself
    #                                # Note: No backslashes allowed; use '/' to denote directory paths
    #
    #     method:signature: %regex%  # Matches soot-style method signatures, e.g., <com.example.Main: void main(java.lang.String[])>
    #     method:name: %regex%       # Matches method names, e.g., "main"
    #
    #     field:signature: %regex%   # Matches soot-style field signatures, e.g., <com.example.util.Optional: java.lang.Object value>
    #     field:name: %regex%        # Matches class field names, e.g., "value"

    - op: Sub   # If Sub is used for all classes, this configuration operates as a whitelist; conversely, Add for all classes implies a blacklist approach.
        # Avoid using .+ to match all resources if neither whitelist nor blacklist is intended.
      # Resources not matched by any scanning filters retain their original handling mode.
      class:name: .+ # Matches any class



    # üü¢ Add classes you wish to scan here ‚Üì (Direct class name matching is possible)
    #    - op: Add                           # Uncomment this line and the next
    #      class:name: com.insecurebank      # <- Fill in; (disallow com\android\insecurebankv2 or com/android/insecurebankv2)
    # Alternatively, match classes via their corresponding source paths
    - op: Add
      class:src: /src/main/             # <- Fill in; (avoid src\\main ; also not advised to use src/main , which may match e.g., /js-src/main)



    - op: Add
      class:src: /.+_jsp.java$          # Matches any class corresponding to, e.g., build/jsp-classes/org/**/View_jsp.java, note this is matching classes, not sources
    - op: Sub
      class:name: \.R(\$.*)?$           # E.g., com.android.R$id

  classpath: # For filtering class loading; classes within excluded classpaths won't be loaded by the analyzer, thus not analyzed
    # Typically used to exclude invalid jars (like those containing method declarations without bodies, leading to many false negatives in analysis if normal classes are also present due to class loading's one-instance-per-name policy), common in Android
    # Configurable fields:
    #   - op: Add                  # Add for inclusion, Sub for exclusion
    #     path: %regex%            # Matches the class file path, e.g., .class/jar/war/apk/dex/zip etc.
    #                             # Internal resources in archives separated by !/, e.g., build/application.jar!/BOOT-INF/classes/
    #                             # No backslashes allowed; use '/' for directory paths
    - op: Sub
      path: /classes-header.jar   # Problematic Android intermediate jar
    - op: Sub
      path: /classes-turbine.jar  # Problematic Android intermediate jar

  file: # For including or excluding various resource files like source code and other resources, without affecting classes
    # Configurable fields:
    #   - op: Add                  # Add for inclusion, Sub for exclusion
    #     path: %regex%            # Note: No backslashes allowed; use '/' for directory paths
    #                             # Internal resources in archives separated by !/, e.g., build/application.jar!/META-INF/MANIFEST.MF
    - op: Sub
      path: /out/
    - op: Sub
      path: /output/
    - op: Sub
      path: /tmp/
    - op: Sub
      path: /temp/
    - op: Sub
      path: /log/                 # When denoting folder paths, preferably append "/", else files with 'log' in their names will also be excluded
    - op: Sub
      path: /logs/
    - op: Sub
      path: /build/
    - op: Sub
      path: /target/
    - op: Sub
      path: /\.git/
    - op: Sub
      path: /\.idea/
    - op: Sub
      path: /\.gradle/
    - op: Sub
      path: /\.mvn
    - op: Sub
      path: /\.run/

    - op: Add
      path: /.+_jsp.java$         # Matches source files like build/jsp-classes/org/**/View_jsp.java, note this is for sources only
    - op: Sub
      path: /R\.java$             # E.g., com/android/R.java
